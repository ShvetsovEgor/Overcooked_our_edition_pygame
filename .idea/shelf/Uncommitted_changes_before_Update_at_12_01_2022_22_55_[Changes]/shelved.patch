Index: gameplay.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\r\nimport pygame.sprite\r\nfrom interier import Floor, Wall, Fridge, Oven, Knife, Sink, Box, Table\r\nfrom players import Player, SecondPlayer\r\nfrom food import Ingridients\r\nimport sqlite3\r\n\r\n\r\nclass GamePlayScene:\r\n    def __init__(self, parent, filename, screen):\r\n        self.obstacle = pygame.sprite.Group()\r\n        self.playersgroup = pygame.sprite.Group()\r\n        self.allsprites = pygame.sprite.Group()\r\n        self.foodgroup = pygame.sprite.Group()\r\n        self.parent = parent\r\n        self.width = self.parent.width\r\n        self.height = self.parent.height\r\n        self.screen = screen\r\n        self.filename = \"levels/\" + filename\r\n        self.filedb = filename[:-4]\r\n\r\n        self.load_level()\r\n        self.running = True\r\n        FPS = 60\r\n        clock = pygame.time.Clock()\r\n        while self.running:\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    self.running = False\r\n                    self.parent.running = False\r\n            if self.running:\r\n                self.screen.fill(\"white\")\r\n                self.allsprites.draw(self.screen)\r\n                self.playersgroup.draw(self.screen)\r\n                self.playersgroup.update(self.obstacle)\r\n                clock.tick(FPS)\r\n                pygame.display.flip()\r\n        pygame.quit()\r\n\r\n    def load_level(self):\r\n        with open(self.filename, encoding=\"utf8\") as csvfile:\r\n            reader = csv.reader(csvfile, delimiter=';', quotechar='\"')\r\n            self.board = list(reader)\r\n        num = self.board.index(['---'])\r\n        self.aims = self.board[num+1:]\r\n        print(self.aims)\r\n        self.board = self.board[:num]\r\n        self.cell_size = min(self.width // len(self.board[0]), self.height // len(self.board))\r\n        self.border_x = (self.width - self.cell_size * len(self.board[0])) // 2\r\n        self.border_y = (self.height - self.cell_size * len(self.board)) // 2\r\n        self.generate_level()\r\n\r\n    def generate_level(self):\r\n        for y in range(len(self.board)):\r\n            for x in range(len(self.board[y])):\r\n                vect_x, vect_y = self.border_x + x * self.cell_size, self.border_y + y * self.cell_size\r\n                if self.board[y][x] == '.':\r\n                    Floor(vect_x, vect_y, self.allsprites, self.cell_size)\r\n                elif self.board[y][x] == '#':\r\n                    Wall(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                elif self.board[y][x] == 'f':\r\n                    a = self.aims[-1][0].split()[1:]\r\n                    Fridge(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                    for elem in a:\r\n                        Ingridients(vect_x, vect_y, elem, self.allsprites)\r\n\r\n                elif self.board[y][x] == 'o':\r\n                    Oven(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                elif self.board[y][x] == 'k':\r\n                    Knife(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                elif self.board[y][x] == 's':\r\n                    Sink(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                elif self.board[y][x] == 'b':\r\n                    Box(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                elif self.board[y][x] == 't':\r\n                    Table(vect_x, vect_y, self.allsprites, self.obstacle, self.cell_size)\r\n                # Декодировка символов в классы\r\n\r\n        self.rows = x\r\n        self.cols = y\r\n\r\n        if self.parent.kol == 2:\r\n            x, y = 0, 0  # вопрос\r\n            self.first_player = Player(x, y, self.playersgroup, self.allsprites, self.cell_size)\r\n            self.second_player = SecondPlayer(x, y, self.playersgroup, self.allsprites)\r\n        elif self.parent.kol == 1:\r\n            x, y = 100, 100  # вопрос\r\n            self.first_player = Player(x, y, self.playersgroup, self.allsprites, self.cell_size - 5)\r\n\r\n        con = sqlite3.connect(\"level_history.db\")\r\n\r\n        cur = con.cursor()\r\n        result = cur.execute(f\"SELECT * FROM history WHERE title = '{self.filedb}'\").fetchall()[0][-1].split()\r\n        print(result)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gameplay.py b/gameplay.py
--- a/gameplay.py	(revision 4d316fc50694b4362cbd98e4803c23da63e5a94f)
+++ b/gameplay.py	(date 1641825200842)
@@ -86,9 +86,9 @@
         elif self.parent.kol == 1:
             x, y = 100, 100  # вопрос
             self.first_player = Player(x, y, self.playersgroup, self.allsprites, self.cell_size - 5)
-
-        con = sqlite3.connect("level_history.db")
-
-        cur = con.cursor()
-        result = cur.execute(f"SELECT * FROM history WHERE title = '{self.filedb}'").fetchall()[0][-1].split()
-        print(result)
+        # print(self.filedb)
+        # con = sqlite3.connect("level_history.db")
+        #
+        # cur = con.cursor()
+        # result = cur.execute(f"SELECT * FROM history WHERE title = '{self.filedb}'").fetchall()[0][-1].split()
+        # print(result)
